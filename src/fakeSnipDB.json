{"-L0CWcvmGdR8fbRhNSSE":{"codeAuthor":"","codeText":"sdakfhksdjah sdkljklsdjaklasdjf klasdhf","codeTitle":"afsd"},"-L0CfKA80m2F2TUlOe2S":{"codeAuthor":"lkjdfs;glj;o","codeText":"klasdfglkh kdfjsh lkdsfhoowejn;cva ;j f['j ;lkj","codeTitle":"ern;e"},"-L0CswTTHcLq49dRHviy":{"codeAuthor":"","codeText":"","codeTitle":""},"-L0CvLOrUXOJ5x-_BoPh":{"codeAuthor":" kjh k","codeText":"jhsdgfjhgdssdjkfgjjk jsdfhk kj'lj ;kldf ;kdfhg lkdjfh ","codeTitle":"klhsdfk "},"-L0D2Nh84cJWQl-sk-7B":{"codeAuthor":" kjh k","codeText":"jhsdgfjhgdssdjkfgjjk jsdfhk kj'lj ;kldf ;kdfhg lkdjfh sdfasdfasdf","codeTitle":"klhsdfk "},"-L0D2crvmelzUFcD-plx":{"codeAuthor":" kjh k","codeText":"jhsdgfjhgdssdjkfgjjk jsdfhk kj'lj ;kldf ;kdfhg lkdjfh sdfasdfasdf","codeTitle":"klhsdfk "},"-L0D2qCMWIx0tZb4VdOG":{"codeAuthor":" kjh k","codeText":"jhsdgfjhgdssdjkfgjjk jsdfhk kj'lj ;kldf ;kdfhg lkdjfh sdfasdfasdf","codeTitle":"klhsdfk "},"-L0D3Evf-qMsPFTFqdNc":{"codeAuthor":" kjh k","codeText":"jhsdgfjhgdssdjkfgjjk jsdfhk kj'lj ;kldf ;kdfhg lkdjfh sdfasdfasdf","codeTitle":"klhsdfk "},"-L0D6JZlIK60sx37V1Bd":{"codeAuthor":"asdasd","codeText":"asdasd","codeTitle":"","langSelect":"thing","skillSelect":""},"-L0N7WiZ5bZiY0XWvQ9O":{"codeAuthor":"","codeText":"foo","codeTitle":"","langSelect":"","skillSelect":""},"-L0N7s3Cv8UDR87dJQJd":{"codeAuthor":"","codeText":"bar","codeTitle":"","langSelect":"","skillSelect":""},"-L0N7zODJyo1S5t5vVpU":{"codeAuthor":"","codeText":"bar","codeTitle":"","langSelect":"","skillSelect":""},"-L0NCUkz1VZIU0_iV_75":{"codeAuthor":";dddd","codeText":"sak.jdh","codeTitle":"k;jds ","langSelect":"beginner","skillSelect":""},"-L0NE-CCCLTxwzHI_JG5":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE-aLBlyL8YkWSiJ6":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE1tRav38amsPXPuQ":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE1wqw8w9ScjQ15aU":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2-I12gYezvkzBQC":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE22Z2d62ZgxuyzOA":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE24h2KQYpaeY8QXD":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE28BzUysPedgfSZC":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2BKqjBww1BDLgrf":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2ExRz1E-hgWQZiQ":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2INPcV6ayyp4Itq":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2LyqsXWSXAq1NIq":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2PhgnFD-RVxXq-M":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2T4bjfKNAybMKmk":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2XodLNUmLto46Wu":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2adsUSkIwrQe2ph":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2dpGEVn08qc7z8r":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2hTX99nzVO9advU":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2kkVbcSJz60UE2v":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2nx_t2vwIESNmuw":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2r39Nmly9OiosCY":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2u_v7PHNPcmbRk3":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE2yG2KGhnSxuIAiY":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE30UHpfNaNY_Se3U":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NE33eWoDKoq9hJVZh":{"codeAuthor":"lkdsjf","codeText":"s;lkdaj ","codeTitle":"sdlkjf","langSelect":"","skillSelect":""},"-L0NEEwS_9XBKMINIbPM":{"codeAuthor":"","codeText":"fdsfdffd","codeTitle":"ss","langSelect":"","skillSelect":""},"-L0NEFB7qF0VQr11Rquy":{"codeAuthor":"","codeText":"fdsfdffd","codeTitle":"ss","langSelect":"","skillSelect":""},"-L0NEFDwCf7Cr4Ypo6PR":{"codeAuthor":"","codeText":"fdsfdffd","codeTitle":"ss","langSelect":"","skillSelect":""},"-L0NEFGzqBu39Y9PbqpA":{"codeAuthor":"","codeText":"fdsfdffd","codeTitle":"ss","langSelect":"","skillSelect":""},"-L0NEFMrTCU9PZ28-P42":{"codeAuthor":"","codeText":"fdsfdffd","codeTitle":"ss","langSelect":"","skillSelect":""},"-L0NEFQVl_WnjZ5q8ibl":{"codeAuthor":"","codeText":"fdsfdffd","codeTitle":"ss","langSelect":"","skillSelect":""},"-L0NEFUQGKmK7oGspxGT":{"codeAuthor":"","codeText":"fdsfdffd","codeTitle":"ss","langSelect":"","skillSelect":""},"-L0NEIlJfPlBw9N9SbqU":{"codeAuthor":";ofdsu","codeText":"a;kfdsj","codeTitle":";lkfdsj","langSelect":"","skillSelect":""},"-L0NEIzmOTKJptu9TgfI":{"codeAuthor":";ofdsu","codeText":"a;kfdsj","codeTitle":";lkfdsj","langSelect":"","skillSelect":""},"-L0NEJ1VFstT7RrdxzPo":{"codeAuthor":";ofdsu","codeText":"a;kfdsj","codeTitle":";lkfdsj","langSelect":"","skillSelect":""},"-L0NEJ3iesfYQBLiCoe_":{"codeAuthor":";ofdsu","codeText":"a;kfdsj","codeTitle":";lkfdsj","langSelect":"","skillSelect":""},"-L0NEJLikhC6IRZ-Po_b":{"codeAuthor":";ofdsu","codeText":"a;kfdsj","codeTitle":";lkfdsj","langSelect":"","skillSelect":""},"-L0NEJO-XdebPPWa82AP":{"codeAuthor":";ofdsu","codeText":"a;kfdsj","codeTitle":";lkfdsj","langSelect":"","skillSelect":""},"-L0NEJQq5Ou0aJmqZ4MO":{"codeAuthor":";ofdsu","codeText":"a;kfdsj","codeTitle":";lkfdsj","langSelect":"","skillSelect":""},"-L0NEJU7qgdP57L1rI2l":{"codeAuthor":";ofdsu","codeText":"a;kfdsj","codeTitle":";lkfdsj","langSelect":"","skillSelect":""},"-L0NEZ5X_Fj8P3pxHuHf":{"codeAuthor":";lkdsj","codeText":"s;ldkfj","codeTitle":"sdlka","langSelect":"","skillSelect":""},"-L0NEZDbrW5yXx6wtRgg":{"codeAuthor":";lkdsj","codeText":"s;ldkfj","codeTitle":"sdlka","langSelect":"","skillSelect":""},"-L0NEZGAMppBR-rrKJbo":{"codeAuthor":";lkdsj","codeText":"s;ldkfj","codeTitle":"sdlka","langSelect":"","skillSelect":""},"-L0NEZIW-hZYMGdVYX4S":{"codeAuthor":";lkdsj","codeText":"s;ldkfj","codeTitle":"sdlka","langSelect":"","skillSelect":""},"-L0NEZL6VtGIGaIocPOh":{"codeAuthor":";lkdsj","codeText":"s;ldkfj","codeTitle":"sdlka","langSelect":"","skillSelect":""},"-L0NF3uHK7ZYJ7ImkFj-":{"codeAuthor":";lkdsj","codeText":"s;ldkfj","codeTitle":"sdlka","langSelect":"","skillSelect":""},"-L0NF4T-h21OI5gN7mVX":{"codeAuthor":";lkdsj","codeText":"s;ldkfj;lkdsahj","codeTitle":"sdlka","langSelect":"","skillSelect":""},"-L0NF6tGW3vLCFEhDUP9":{"codeAuthor":";lkdsj","codeText":"s;ldkfj;lkdsahj","codeTitle":"sdlka","langSelect":"","skillSelect":""},"-L0NHohlnKNOxxabzWph":{"codeAuthor":"vcxvcxvcx","codeText":">DSAn.,mdsnfa","codeTitle":"cxvvcxv","langSelect":"","skillSelect":""},"-L0OQrGQga6vSFZh8DY1":{"codeAuthor":"zzz","codeText":"this is code homies","codeTitle":"a titel","langSelect":"advance","skillSelect":""},"-L0OQzcZ9DTF24Ejy32U":{"codeAuthor":"","codeText":"sdfgdfg ","codeTitle":"","langSelect":"","skillSelect":""},"-L0ORErFvrAgPDflZNOc":{"codeAuthor":"me","codeText":"/* global fetch */\n\nimport React, { Component } from 'react'\nimport './App.css'\nimport PastePage from './PastePage'\nimport {\n  BrowserRouter as Router,\n  Route\n} from 'react-router-dom'\n\nclass TagsPage extends Component {\n  render () {\n    return (\n      <div>\n        <p>the tags page</p>\n      </div>\n    )\n  }\n}\n\nclass DisplayPage extends Component {\n  constructor () {\n    super()\n\n    this.state = {\n      codeText: ''\n    }\n  }\n\n  componentWillMount () {\n    /* idk why eslint cant deal with assigning in an if */\n    let fbUrl = ''\n    const snipKey = this.props.match.params.snipKey\n\n    // 'https://console.firstproj-9f9e1.firebaseio.com/database/data/snip.json'\n    fbUrl = `https://firstproj-9f9e1.firebaseio.com/snip/${snipKey}.json`\n\n    // const getInit = {\n    //   method: 'GET'\n    // }\n\n    fetch(fbUrl)\n      .then(resp => resp.json())\n      .then((resp) => {\n        this.setState({ codeText: resp.codeText })\n      })\n      .catch((err) => {\n        console.log(err)\n        this.setState({codeText: '404 page not found'})\n      })\n  }\n\n  render () {\n    return (\n      <div>\n        <p>{this.state.codeText}</p>\n      </div>\n    )\n  }\n}\n\nclass App extends Component {\n  ifFbKeyOrNot (aStr) {\n    const patt = '^-[a-zA-Z0-9]+'\n\n    if (aStr.match(patt)) {\n      return aStr\n    } else {\n      return false\n    }\n  }\n\n  render () {\n    return (\n      <Router>\n        <div id='App'>\n          {/*  exact is to only route if alone */}\n          <Route exact path='/' render={props => (\n            <PastePage {...props} />\n          )} />\n          <Route path='/snip/:snipKey' render={(props) => {\n            console.log('>>>>>>', props)\n            const validUrl = this.ifFbKeyOrNot(props.match.params.snipKey)\n            if (validUrl) {\n              return <DisplayPage {...props} />\n            } else {\n              return <TagsPage />\n            }\n          }} />\n          <Route path='/tags' component={TagsPage} />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","codeTitle":"this web site","langSelect":"pyhton","skillSelect":""},"-L0OcqJ4eRAB3BxkXZv5":{"codeAuthor":"me","codeText":"import React, { Component } from 'react'\nimport {\n  Form,\n  FormGroup,\n  FormControl,\n  Button\n} from 'react-bootstrap'\n\nclass PasteInlineForm extends Component {\n  render () {\n    return (\n      <Form inline>\n        <FormGroup>\n          <FormControl\n            id='snippetTitle'\n            type='text'\n            placeholder='title'\n            value={this.props.codeTitle}\n            onChange={(e) => this.props.handleChange(e, 'codeTitle')}\n          />\n        </FormGroup>\n        {' '}\n        <FormGroup>\n          <FormControl\n            type='text'\n            id='snippetAuthor'\n            placeholder='author'\n            value={this.props.codeAuthor}\n            onChange={(e) => this.props.handleChange(e, 'codeAuthor')}\n          />\n        </FormGroup>\n        {' '}\n        <FormGroup>\n          <FormControl\n            id='langSelect'\n            componentClass='select'\n            placeholder='lang'\n            value={this.props.langSelect}\n            onChange={(e) => this.props.handleChange(e, 'langSelect')}\n          >\n            <option value='lang'>lang</option>\n            <option value='Python'>Python</option>\n            <option value='JavaScript'>JavaScript</option>\n          </FormControl>\n        </FormGroup>\n        {' '}\n        <FormGroup>\n          <FormControl\n            id='skillSelect'\n            componentClass='select'\n            placeholder='skill'\n            value={this.props.skillSelect}\n            onChange={(e) => this.props.handleChange(e, 'langSelect')}\n          >\n            <option value='skill'>skill</option>\n            <option value='beginner'>beginner</option>\n            <option value='intermediate'>intermediate</option>\n            <option value='advance'>advance</option>\n          </FormControl>\n        </FormGroup>\n        <Button bsStyle='primary'\n          id='submitButton'\n          onClick={this.props.sendToFB}\n        >Submit</Button>\n      </Form>\n    )\n  }\n}\n\nexport default PasteInlineForm\n","codeTitle":"another for this site","langSelect":"JavaScript","skillSelect":""},"-L0TIbGllDMDbEO490ku":{"codeAuthor":"zzzzzzzzzzz","codeText":"import React, { Component } from 'react'\nimport './App.css'\nimport PastePage from './PastePage'\nimport {\n  BrowserRouter as Router,\n  Route\n} from 'react-router-dom'\nimport DisplayPage from './DisplayPage'\n\nclass TagsPage extends Component {\n  render () {\n    return (\n      <div>\n        <p>the tags page</p>\n      </div>\n    )\n  }\n}\n\nclass App extends Component {\n  render () {\n    return (\n      <Router>\n        <div id='App'>\n          {/*  exact is to only route if alone */}\n          <Route exact path='/' render={props => (\n            <PastePage {...props} />\n          )} />\n          <Route path='/snip/:snipKey' render={props => (\n            <DisplayPage {...props} />\n          )} />\n          <Route path='/tags' component={TagsPage} />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","codeTitle":"zzzzzzzzzzzzz","langSelect":"JavaScript","skillSelect":""},"-L0TQUsx6YG_pLcj69ms":{"codeAuthor":"e","codeText":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    <meta name=\"theme-color\" content=\"#000000\">\n    <!--\n      manifest.json provides metadata used when your web app is added to the\n      homescreen on Android. See https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/\n    -->\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\">\n    <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css\">\n    \t<link rel=\"stylesheet\" href=\"%PUBLIC_URL%/prism-okaidia.css\" />\n    <!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->\n    <title>React App</title>\n  </head>\n  <body>\n    <noscript>\n      You need to enable JavaScript to run this app.\n    </noscript>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n    <script src=\"%PUBLIC_URL%/prism.js\">\n      Prism.highlightAll(async)\n    </script>\n  </body>\n</html>\n","codeTitle":"index","langSelect":"Python","skillSelect":""},"-L0dAmVJONBe-cBxAOyx":{"codeAuthor":"me","codeText":"/* global jest it describe expect */\n\nimport React from 'react'\nimport Enzyme, { shallow } from 'enzyme'\nimport Adapter from 'enzyme-adapter-react-16'\nimport PasteInlineForm from './PasteInlineForm'\nimport PasteBox from './PasteBox'\nimport fetch from 'jest-fetch-mock'\n\nEnzyme.configure({adapter: new Adapter()})\nwindow.fetch = fetch\n\ndescribe('integration testing', () => {\n  // main integration testing\n  it('renders the right text in the code box', () => {\n    const bumBumyData = {\n      codeText: 'this is code',\n      handleChange: jest.fn()\n    }\n    const appC = shallow(<PasteBox {...bumBumyData} />)\n    expect(appC.find('#pastingText').props()['value']).toBe('this is code')\n  })\n\n  it('renders the right text in the title box', () => {\n    // dummy data\n    const bumBumyData = {\n      codeTitle: 'a title',\n      codeAuthor: '',\n      langSelect: '',\n      skillSelect: '',\n      handleChange: jest.fn()\n    }\n\n    // shallow render the component with dummy data\n    const pform = shallow(<PasteInlineForm {...bumBumyData} />)\n\n    // call props again and retrieve value\n    expect(pform.find('#snippetTitle').props()['value']).toBe('a title')\n  })\n\n  it('renders the right text in author box', () => {\n    // dummy data\n    const bumBumyData = {\n      codeAuthor: 'i am an author',\n      handleChange: jest.fn()\n    }\n\n    // shallow render the component with dummy data\n    const pform = shallow(<PasteInlineForm {...bumBumyData} />)\n    // call props again and retrieve value\n    expect(pform.find('#snippetAuthor').props()['value']).toBe('i am an author')\n  })\n\n  it('sets the right lang in the select menu', () => {\n    // dummy data\n    const bumBumyData = {\n      langSelect: 'python',\n      handleChange: jest.fn()\n    }\n\n    // shallow render the component with dummy data\n    const pform = shallow(<PasteInlineForm {...bumBumyData} />)\n    // call props again and retrieve value\n    expect(pform.find('#langSelect').props().value).toBe('python')\n  })\n\n  it('sets the right skill in the select menu', () => {\n    // dummy data\n    const bumBumyData = {\n      skillSelect: 'intermediate',\n      handleChange: jest.fn()\n    }\n\n    // shallow render the component with dummy data\n    const pform = shallow(<PasteInlineForm {...bumBumyData} />)\n    // call props again and retrieve value\n    expect(pform.find('#skillSelect').props().value).toBe('intermediate')\n  })\n\n  it('calls the sendToFB callback when the click', () => {\n    const fbCallBack = jest.fn()\n    const bumBumyData = {\n      codeTitle: 'a title',\n      codeAuthor: '',\n      langSelect: '',\n      skillSelect: '',\n      handleChange: jest.fn(),\n      sendToFB: fbCallBack\n    }\n\n    const shalForm = shallow(<PasteInlineForm {...bumBumyData} />)\n\n    const button = shalForm.find('#submitButton')\n    button.simulate('click')\n    expect(fbCallBack.mock.calls.length).toBe(1)\n  })\n})\n","codeTitle":"testsssss","langSelect":"JavaScript","skillSelect":""},"-L0dDDxab42uChdIuah9":{"codeAuthor":"","codeText":"\n└──▶ git rebase -i HEAD~9\nerror: cannot 'squash' without a previous commit\nYou can fix this with 'git rebase --edit-todo' and then run 'git rebase --continue'.\nOr you can abort the rebase with 'git rebase --abort'.\n┌─╼ ~/proj/codebits\n└──▶ git rebase --abort \n┌─╼ ~/proj/codebits\n└──▶ git rebase -i HEAD~9\n[detached HEAD 3a429dc] Added Routing Testing and fetch request to Fire Base\n Date: Tue Dec 12 19:25:36 2017 -0800\n 10 files changed, 572 insertions(+), 392 deletions(-)\n rewrite README.md (63%)\n rewrite src/App.js (88%)\n create mode 100644 src/DisplayPage.js\n rename src/{pasteBox.js => PasteBox.js} (59%)\n rename src/{pasteInlineForm.js => PasteInlineForm.js} (58%)\n create mode 100644 src/PastePage.js\n rewrite src/integration.test.js (67%)\nSuccessfully rebased and updated refs/heads/add_all_data_toFB.\n┌─╼ ~/proj/codebits\n└──▶ gitstatus \nOn branch add_all_data_toFB\nYour branch and 'origin/add_all_data_toFB' have diverged,\nand have 1 and 8 different commits each, respectively.\n  (use \"git pull\" to merge the remote branch into yours)\n\nnothing to commit, working tree clean\n* add_all_data_toFB\n  display_page\n  master\n┌─╼ ~/proj/codebits\n","codeTitle":"","langSelect":"","skillSelect":""},"-L0excjva5rGRWlaZ1CI":{"codeAuthor":"me","codeText":"'''\nmake the dynamic loading class and maybe also the default's\n\nbase_dir: is always the root project foleder\n    base_dir = 'path/to/project'\n'''\n\nimport os\nimport requests\nimport venv\nfrom datetime import datetime\nfrom bs4 import BeautifulSoup\nimport bones\nimport settings\n\n\nclass BaseSkell:\n    def __init__(self, project_path, project_name):\n        ''' add all attributes here '''\n\n        self.name = project_name\n        self.base_dir = project_path\n\n        self.readme = {\n                'path': os.path.join(project_path, 'README.md'),\n                'text': '# README \\n\\n## Usage'\n                }\n\n        self.requirements = {\n                'path': os.path.join(self.base_dir, 'requirements.txt'),\n                'text': ''\n                }\n\n    def make_dirs(self):\n        ''' make all project dirs '''\n\n        try:\n            os.makedirs(self.base_dir)\n        except FileExistsError as e:\n            print(e)\n            print('dir already exists \\n not making skell')\n\n        # loop over all dirs and make each one\n        for a_dir in self.project_dirs:\n            dir_path = os.path.join(self.base_dir, a_dir)\n            os.makedirs(dir_path)\n        print(f'the dirs {\" \".join(self.project_dirs)} where made')\n\n    def make_blank_files(self):\n        ''' make all project files '''\n\n        for a_file in self.project_files:\n            with open(a_file['path'], 'w+') as f:\n                f.write(a_file['text'])\n\n    def request_from_api(self, tags):\n        page = requests.get(f'https://www.gitignore.io/api/{tags}')\n        page = page.text\n        soup = BeautifulSoup(page, 'html.parser')\n        text = soup.text.strip()\n        return text\n\n    def print_all_tags(self):\n        print(bones.gitignore_all_tags)\n\n    def print_few_tags(self):\n        print('(os implied) node django'\n              'vim archive jupyternotebook')\n\n    def add_default_tags(self, tags):\n        osname = os.uname().sysname.lower() + ','\n\n        tags_str = osname + 'git,' + tags\n\n        return tags_str\n\n    def make_gitignore(self):\n        \"\"\" get a gitignore from www_gitignoreio_api\n\n        tags = 'python,linux,git'\n        \"\"\"\n\n        tags = self.add_default_tags(self.git_tags)\n\n        # destination = self.base_dir\n\n        # commented to not hit the api while testing\n        # request_from_api returns a str\n        # text = self.request_from_api(tags)\n        # ignore_file = os.path.join(destination, '.gitignore')\n        # with open(ignore_file, 'a+') as f:\n        #     f.write(text)\n        print(f'gitignore made with {tags}')\n\n        return\n\n    def make_license(self):\n        ''' make a license file '''\n\n        now = datetime.now()\n\n        full_date = f'{now.year}-{now.month}-{now.day}'\n\n        license_text = bones.mit_license\\\n            .replace('{{full-date}}', full_date)\\\n            .replace('{{settings-author}}', settings.author)\n\n        license_path = os.path.join(self.base_dir, 'LICENSE')\n        with open(license_path, 'w+') as f:\n            f.write(license_text)\n\n    def run_git_command(self):\n        ''' call git init '''\n\n        os.system(f'git init {self.base_dir}')\n\n    def overwrite_a_file(self, file_path, the_text):\n        ''' over write the given files '''\n\n        with open(file_path, 'w', encoding='utf-8') as f:\n            f.write(the_text)\n\n    def get_venv_activation_script(self, env_name):\n\n        bones_text = bones.linux_venv_activate\n        venv_dir = os.path.join(settings.VENV_PATH, env_name)\n\n        venv_text1 = bones_text.replace('__VENV_DIR__', venv_dir)\n        venv_text = venv_text1.replace('__VENV_BIN_NAME__', 'bin')\n\n        return venv_text\n\n    def make_python_venv(self):\n        builder = venv.EnvBuilder(system_site_packages=False,\n                                  clear=False,\n                                  symlinks=True,\n                                  upgrade=False,\n                                  with_pip=True,\n                                  prompt=None)\n\n        env_name = f'{self.name}_env'\n        builder.create(os.path.join(settings.VENV_PATH, env_name))\n\n        path_tuple = (settings.VENV_PATH, env_name, 'bin', 'activate')\n\n        activate_path = os.path.join(*path_tuple)\n\n        self.overwrite_a_file(activate_path,\n                              self.get_venv_activation_script(env_name))\n\n        print(f'venv made in {settings.VENV_PATH}')\n\n    def standard_methods(self):\n        ''' call the most common methods '''\n\n        self.make_dirs()\n        self.make_blank_files()\n        self.make_gitignore()\n        self.make_license()\n        self.run_git_command()\n\n\nclass Python(BaseSkell):\n\n    def __init__(self, project_path, project_name, env=None):\n        super().__init__(project_path, project_name)\n\n        self.project_dirs = [self.name, 'docs', 'tests']\n        self.git_tags = 'python'  # dont add os tag\n\n        if env:\n            self.env = env\n        self.prompt = None\n        if settings.prompt:\n            self.prompt = settings.prompt\n\n        dunder_init = {\n                'path': os.path.join(self.base_dir, self.name, '__init__.py'),\n                'text': ''\n                }\n\n        self.project_files = [self.readme, dunder_init]\n\n    def build(self):\n        self.standard_methods()\n\n        # if env add requirements to project_dirs and make venv w/wo prompt\n        if self.env:\n            self.project_dirs.append(self.requirements)\n            if self.prompt:\n                self.make_python_venv(self.prompt)\n            else:\n                self.make_python_venv()\n\n\nclass JavaScript(BaseSkell):\n\n    def __init__(self, project_path, project_name):\n        super().__init__(project_path, project_name)\n\n        self.project_dirs = ['src', 'docs', 'tests']\n        self.git_tags = 'node'  # dont add os tag\n\n        self.project_files = [self.readme]\n\n    def build(self):\n        self.standard_methods()\n\n\nclass GitIgnore(BaseSkell):\n    def __init__(self, base_dir, _, tags=None):\n        self.base_dir = base_dir\n\n        if not tags:\n            self.git_tags = self.gitignore_menu()\n        else:\n            self.git_tags = tags\n\n    def gitignore_menu(self):\n        ''' show gitignore menu '''\n\n        defaults = {1: 'python', 2: 'node', 3: 'vim'}\n\n        print(defaults)\n\n        while True:\n            tags = input('which tags (list [-v]|{tags}): ')\n            try:\n                # if input is a number use to set tags from default dict\n                tags = defaults[int(tags)]\n                return tags\n            except ValueError as e:\n                if tags == 'list -v':\n                    # get all tags from internet\n                    self.print_all_tags()\n                elif tags == 'list':\n                    # print a few available and common tags\n                    self.print_few_tags()\n                elif tags:\n                    tags = tags.replace(' ', ',')\n                    return tags\n\n    def build(self):\n        self.make_gitignore()\n\n\nclass Venv(BaseSkell):\n    def build(self):\n        print(f'bnuilding in to {self.base_dir}')\n        self.make_python_venv()\n","codeTitle":"skell","langSelect":"Python","skillSelect":""},"-L0luEA1VAQuyT36sEe9":{"codeAuthor":"khdsflkjhdskjfhsd\\\\\\","codeText":"kjdsahfkjdsahfkjdsahflkjdsahfkljdsahlkjdhf","codeTitle":"kjdshflkhdslkjfh","langSelect":"","skillSelect":""},"-L0u2KROX2aKDPlP_km-":{"codeAuthor":"me","codeText":"/* global fetch */\nimport React, { Component } from 'react'\nimport './App.css'\n\nimport {\n  Panel,\n  Overlay\n} from 'react-bootstrap'\n\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport { atelierDuneDark } from 'react-syntax-highlighter/styles/hljs'\n\nimport WriteAnnotation from './WriteAnnotation'\nimport ShowAno from './ShowAno'\n\nclass DisplayPage extends Component {\n  constructor () {\n    super()\n\n    this.state = {\n      snipKey: 0,\n      codeText: '',\n      codeTitle: '',\n      codeAuthor: '',\n      skillSelect: '',\n      langSelect: '',\n      anoText: '',\n      anoAuthor: '',\n      anoLineBegin: 0,\n      anoLineEnd: 0,\n      lineCount: 0,\n      overlayShow: false,\n      overlayTarget: false,\n      allAnos: {},\n      anoLines: [],\n      anoOverlayShow: false,\n      anoOverlayTarget: false,\n      currentAno: ''\n    }\n\n    this.addAnnotation = this.addAnnotation.bind(this)\n    this.handleTextChange = this.handleTextChange.bind(this)\n    this.handleLineChange = this.handleLineChange.bind(this)\n    this.sendAnoToDB = this.sendAnoToDB.bind(this)\n    this.anoOrNot = this.anoOrNot.bind(this)\n    this.addOrShowAno = this.addOrShowAno.bind(this)\n  }\n\n  handleLineChange (e, formName) {\n    const eValue = e.target.value.replace(/[a-zA-Z\\W]/g, '')\n    this.setState({[formName]: eValue})\n  }\n\n  handleTextChange (e, formName) {\n    this.setState({[formName]: e.target.value})\n  }\n\n  async componentWillMount () {\n    let fbUrlBase = 'https://firstproj-9f9e1.firebaseio.com/'\n    const snipKey = this.props.match.params.snipKey\n\n    const fbUrl = `${fbUrlBase}snip/${snipKey}.json`\n\n    await fetch(fbUrl)\n      .then(resp => resp.json())\n      .then((resp) => {\n        this.setState({\n          snipKey,\n          codeText: resp.codeText,\n          codeTitle: resp.codeTitle,\n          codeAuthor: resp.codeAuthor,\n          skillSelect: resp.skillSelect,\n          langSelect: resp.langSelect\n        })\n      })\n      .catch((err) => {\n        console.log(err)\n        this.setState({codeText: '404 page not found'})\n      })\n\n    const anoUrl = `${fbUrlBase}/ano.json`\n\n    await fetch(anoUrl)\n      .then(resp => resp.json())\n      .then((resp) => {\n        const allAnos = Object.values(resp)\n          .filter((obj) => obj.snipKey === this.state.snipKey)\n\n        const anoLines = allAnos.map((obj) => {\n          return obj.anoLineBegin\n        })\n\n        this.setState({allAnos: allAnos, anoLines: anoLines})\n      })\n      .catch(console.log)\n  }\n\n  sendAnoToDB () {\n    const urlBase = 'https://firstproj-9f9e1.firebaseio.com/'\n    const theUrl = `${urlBase}/ano.json`\n\n    const anoObj = {\n      anoText: this.state.anoText,\n      anoAuthor: this.state.anoAuthor,\n      anoLineBegin: this.state.anoLineBegin,\n      anoLineEnd: this.state.anoLineEnd,\n      snipKey: this.state.snipKey\n\n    }\n\n    const myInit = {\n      method: 'POST',\n      body: JSON.stringify(anoObj)\n    }\n\n    fetch(theUrl, myInit)\n      .then(resp => resp.json())\n      .then(() => {\n        this.setState({\n          anoText: '',\n          anoLineBegin: '',\n          anoLineEnd: '',\n          anoAuthor: '',\n          overlayShow: false\n        })\n      })\n      .catch(console.log)\n  }\n\n  addAnnotation (e) {\n    if (e.target.textContent.match('^[0-9]+\\n$')) {\n      const lineNum = parseInt(e.target.textContent, 10)\n      this.setState({\n        overlayTarget: e.target,\n        overlayShow: true,\n        anoLineBegin: lineNum !== 'NaN' ? lineNum : 0\n      })\n    }\n  }\n\n  showAno (e) {\n    const lNum = parseInt(e.target.textContent, 10)\n    const anoT = this.state.allAnos.filter((obj) => {\n      if (obj.anoLineBegin === lNum) {\n        return obj\n      } else {\n        return false\n      }\n    })\n\n    console.log('>>>>>>', anoT[0].anoText)\n\n    this.setState({\n      anoOverlayTarget: e.target,\n      anoOverlayShow: true,\n      currentAno: anoT[0].anoText\n    })\n  }\n\n  addOrShowAno (e) {\n    const l = parseInt(e.target.textContent, 10)\n    if (this.state.anoLines.includes(l)) {\n      console.log('in if')\n      this.showAno(e)\n    } else {\n      console.log('in else')\n      this.addAnnotation(e)\n    }\n  }\n\n  anoOrNot (num) {\n    if (this.state.allAnos.length > 0) {\n      let returnObj = {}\n      this.state.allAnos.forEach((t) => {\n        if (num === t.anoLineBegin) {\n          returnObj = {color: 'red'}\n        }\n      })\n      return returnObj\n    }\n  }\n\n  render () {\n    return (\n      <div\n        id='codeDisplayBox'\n      >\n        <Panel>\n          <p>Title: {this.state.codeTitle}</p>\n          <p>Author: {this.state.codeAuthor}</p>\n          <SyntaxHighlighter\n            language={this.state.langSelect}\n            showLineNumbers\n            style={atelierDuneDark}\n            lineNumberStyle={this.anoOrNot}\n            onClick={this.addOrShowAno}\n          >\n            {this.state.codeText}\n          </SyntaxHighlighter>\n        </Panel>\n\n        <Overlay\n          show={this.state.overlayShow}\n          placemant='right'\n          container={this}\n          target={this.state.overlayTarget}\n        >\n          <WriteAnnotation\n            anoText={this.state.anoText}\n            handleTextChange={this.handleTextChange}\n            handleLineChange={this.handleLineChange}\n            sendAnoToDB={this.sendAnoToDB}\n            anoLineBegin={this.state.anoLineBegin}\n            anoLineEnd={this.state.anoLineEnd}\n          />\n        </Overlay>\n        <Overlay\n          show={this.state.anoOverlayShow}\n          placemant='right'\n          container={this}\n          target={this.state.anoOverlayTarget}\n        >\n          <ShowAno\n            anoText={this.state.currentAno}\n          />\n        </Overlay>\n      </div>\n    )\n  }\n}\n\nexport default DisplayPage","codeTitle":"the display page","langSelect":"JavaScript","skillSelect":""},"-L0wF2M2n3r3-8bhGW28":{"codeAuthor":"peba","codeText":"const saveFiddle = (() => {\n  let running = false\n  let inflight = false\n  let fiddleToSave = {...EMPTY_FIDDLE} // give it the shape of a fiddle to satisfy typing\n\n  const inner = async (fiddle: Fiddle, debounce: boolean = true): Promise<SaveDataType> => {\n    fiddleToSave = fiddle\n    if (running) return {id: null, publishErrors: {}}\n\n    const timeToWait = debounce ? DEBOUNCE_INPUT : 0\n    running = true\n    await new Promise((resolve) => setTimeout(resolve, timeToWait))\n    await waitUntilFalse(inflight, 20)\n    running = false // Ready to take another request while we're in-flight\n    const isNew = !fiddleToSave.id || fiddleToSave.id.length > 10\n    inflight = true\n    const response = isNew ? await api.createFiddle(fiddleToSave) : await api.updateFiddle(fiddleToSave)\n    inflight = false\n    return {id: response.fiddle.id, publishErrors: response.errors}\n  }\n\n  return inner\n})()","codeTitle":"savefiddle","langSelect":"JavaScript","skillSelect":""},"-L0yzNGJU35e6DKtegGN":{"codeAuthor":"me","codeText":"import React, { Component } from 'react'\nimport './App.css'\nimport PastePage from './PastePage'\nimport {\n  Route,\n  HashRouter\n} from 'react-router-dom'\nimport DisplayPage from './DisplayPage'\n\n// BrowserRouter as Router,\n\nclass TagsPage extends Component {\n  render () {\n    return (\n      <div>\n        <p>the tags page</p>\n      </div>\n    )\n  }\n}\n\nclass App extends Component {\n  render () {\n    return (\n      <HashRouter>\n        <div id='App'>\n          {/*  exact is to only route if alone */}\n          <Route exact path='/' render={props => (\n            <PastePage {...props} />\n          )} />\n          <Route path='/snip/:snipKey' render={props => (\n            <DisplayPage {...props} />\n          )} />\n          <Route path='/tags' component={TagsPage} />\n        </div>\n      </HashRouter>\n    )\n  }\n}\n\nexport default App\n","codeTitle":"me","langSelect":"","skillSelect":""},"-L0z3oYPsaoX7zbQ1nbs":{"codeAuthor":"","codeText":"","codeTitle":"","langSelect":"","skillSelect":""},"-L0z4Pp_PuWfql8XMA-m":{"codeAuthor":"","codeText":"Gftt","codeTitle":"","langSelect":"","skillSelect":""}}